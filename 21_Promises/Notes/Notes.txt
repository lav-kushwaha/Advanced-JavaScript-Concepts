#Promise 
=>Promise is used to handle async operations in javascript.

#A JavaScript Promise has three states:

1.Pending: The initial state. The asynchronous operation is still in progress, and the Promise has not been fulfilled or rejected yet.

2.Fulfilled: The operation completed successfully.
The Promise has a resolved value, which you can access using .then().

3.Rejected: The operation failed. 
The Promise has an error or reason for rejection, which you can handle using .catch().

let fetchData = new Promise((resolve, reject) => {
  setTimeout(() => {
    let success = true; // Change to false to simulate rejection

    if (success) {
      resolve("Data fetched successfully!"); // Fulfilled
    } else {
      reject("Error fetching data."); // Rejected
    }
  }, 2000);
});

fetchData
  .then((data) => console.log("Fulfilled:", data)) // Runs if Promise is fulfilled
  .catch((error) => console.error("Rejected:", error)) // Runs if Promise is rejected
  .finally(() => console.log("Promise settled.")); // Runs regardless of outcome

Pending: When fetchData is created.
Fulfilled: If success is true.
Rejected: If success is false.


//Summary :

1. Before promise we used to depend on callback functions which would result in 
1.. Callback Hell (Pyramid of doom) |
2.. Inversion of control

2. Inversion of control is overcome by using promise.
  2.1. A promise is an object that represents eventual completion/failure of an asynchronous operation.
  2.2. A promise has 3 states: pending | fulfilled | rejected.
  2.3. As soon as promise is fulfilled/rejected => It updates the empty object which is assigned undefined in pending state.
  2.4. A promise resolves only once and it is immutable. 
  2.5. Using .then() we can control when we call the cb(callback) function.

3. To avoid callback hell (Pyramid of doom) => We use promise chaining. This way our code expands vertically instead of horizontally. Chaining is done using '.then()'
4. A very common mistake that developers do is not returning a value during chaining of promises. Always remember to return a value. This returned value will be used by the next .then()