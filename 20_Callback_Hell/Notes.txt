#Callback Hell :
=>Callback hell" is a situation in asynchronous programming, typically in JavaScript, where you have multiple nested callbacks. 
=>This can make the code difficult to read and maintain.
=>Callback hell, also known as Pyramid of Doom.

Callback hell in JavaScript refers to a situation where multiple nested callbacks are used in a way that makes the code difficult to read, understand, and maintain. 
This often happens when you have asynchronous operations that depend on each other, leading to multiple layers of nested functions. As a result, the code starts to resemble a pyramid shape (often called "pyramid of doom"), and it becomes challenging to follow the program flow and debug errors.

Below is a simple example illustrating callback hell, where each step depends on the previous step:

// Example of Callback Hell

function step1(callback) {
    setTimeout(() => {
        console.log('Step 1 completed');
        callback();
    }, 1000);
}

function step2(callback) {
    setTimeout(() => {
        console.log('Step 2 completed');
        callback();
    }, 1000);
}

function step3(callback) {
    setTimeout(() => {
        console.log('Step 3 completed');
        callback();
    }, 1000);
}

function step4(callback) {
    setTimeout(() => {
        console.log('Step 4 completed');
        callback();
    }, 1000);
}


// Executing the steps in sequence with callbacks
step1(() => {
    step2(() => {
        step3(() => {
            step4(() => {
                console.log('All steps completed');
            });
        });
    });
});


#Problems with Callback Hell:
Readability: The code becomes hard to read due to nested callbacks.
Maintainability: Adding or removing steps can be tricky.
Error Handling: It becomes more difficult to manage errors since each callback needs its own error handling logic.

Solution:
Using Promises or async/await helps flatten the code and make it more readable and maintainable.


How to Improve This
To avoid callback hell, you can use Promises or async/await. 
Here's how you can rewrite the code using Promises and async/await for better readability:

Using Promises
function step1() {
    return new Promise(resolve => {
        setTimeout(() => {
            console.log('Step 1 completed');
            resolve();
        }, 1000);
    });
}

function step2() {
    return new Promise(resolve => {
        setTimeout(() => {
            console.log('Step 2 completed');
            resolve();
        }, 1000);
    });
}

function step3() {
    return new Promise(resolve => {
        setTimeout(() => {
            console.log('Step 3 completed');
            resolve();
        }, 1000);
    });
}

function step4() {
    return new Promise(resolve => {
        setTimeout(() => {
            console.log('Step 4 completed');
            resolve();
        }, 1000);
    });
}

// Executing the steps in sequence with Promises
step1()
    .then(step2)
    .then(step3)
    .then(step4)
    .then(() => {
        console.log('All steps completed');
    })
    .catch(error => {
        console.error('An error occurred:', error);
    });


Using Async/Await
async function performSteps() {
    try {
        await step1();
        await step2();
        await step3();
        await step4();
        console.log('All steps completed');
    } catch (error) {
        console.error('An error occurred:', error);
    }
}

performSteps();
